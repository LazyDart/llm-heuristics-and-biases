Here's a well-structured binary search function in Python that follows good programming practices such as clear naming, type hints, docstrings, and input validation:

```python
from typing import List, Optional

def binary_search(arr: List[int], target: int) -> Optional[int]:
    """
    Perform binary search on a sorted list to find the index of the target element.

    Parameters:
    - arr (List[int]): A list of integers sorted in ascending order.
    - target (int): The value to search for.

    Returns:
    - Optional[int]: The index of the target if found, otherwise None.
    """
    left, right = 0, len(arr) - 1

    while left <= right:
        mid = (left + right) // 2
        mid_val = arr[mid]

        if mid_val == target:
            return mid
        elif mid_val < target:
            left = mid + 1
        else:
            right = mid - 1

    return None
```

### Example usage:
```python
numbers = [1, 3, 5, 7, 9, 11]
target_value = 7

index = binary_search(numbers, target_value)
if index is not None:
    print(f"Target found at index {index}")
else:
    print("Target not found")
```

Let me know if you want a version that works with any comparable type or handles descending order too.